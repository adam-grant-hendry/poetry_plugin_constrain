name: Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    if: "!startsWith(github.event.head_commit.message, 'ðŸš€ bump:')"

    strategy:
      matrix:
        os: [Windows, macOS, Ubuntu]
        python-version: ["3.8", "3.9", "3.10"]
        include:
          - os: Ubuntu
            image: ubuntu-22.04
          - os: Windows
            image: windows-2022
          - os: MacOS
            image: macos-13
      fail-fast: false

    defaults:
      run:
        shell: bash

    name: Test - ${{ matrix.os }} / python${{ matrix.python-version }}
    runs-on: ${{ matrix.image }}

    steps:
      - name: Check out the Repository
        uses: actions/checkout@v4

      - name: Cache `pre-commit`
        uses: actions/cache@v3
        id: pre-commit-cache
        with:
          path: ~/.cache/pre-commit
          key: ${{ matrix.os }}-python${{ matrix.python-version }}-pre-commit-${{ hashFiles('**/.pre-commit-config.yaml') }}

      - name: Install `poetry==1.6.1`
        run: |
          pipx install poetry==1.6.1

      - name: Setup `python==${{ matrix.python-version }}`
        uses: actions/setup-python@v4
        id: setup-python
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'

      - name: Configure `pip`
        run: |
          python -m pip config set global.disable-pip-version-check true

      - name: Install Dependencies
        if: steps.setup-python.outputs.cache-hit != 'true'
        run: |
          poetry install --with format,github-actions,test,type

      - name: Install `pre-commit` Hooks
        if: steps.pre-commit-cache.outputs.cache-hit != 'true'
        env:
          PRE_COMMIT_HOME: ~/.cache/pre-commit
        run: poetry run pre-commit install --install-hooks

      - name: Run `pre-commit`
        run: poetry run pre-commit run --show-diff-on-failure --color=always --all-files

      - name: Run tests
        run: poetry run coverage run

      - name: Upload Coverage Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage_data
          path: .coverage.*

  coverage:
    name: Coverage
    needs: test

    defaults:
      run:
        shell: bash

    runs-on: ubuntu-22.04

    steps:
      - name: Check out the Repository
        uses: actions/checkout@v4

      - name: Install `poetry==1.6.1`
        run: |
          pipx install poetry==1.6.1

      - name: Install `python==3.10`
        uses: actions/setup-python@v4
        id: setup-python
        with:
          python-version: "3.10"
          cache: 'poetry'

      - name: Configure Python
        run: |
          python -m pip config set global.disable-pip-version-check true

      - name: Install Dependencies
        if: steps.setup-python.outputs.cache-hit != 'true'
        run: |
          poetry install --with test,github-actions

      - name: Download Coverage Artifacts
        uses: actions/download-artifact@v3
        with:
          name: coverage_data

      - name: Combine Coverage Results
        id: coverage_results
        run: |
          poetry run coverage combine
          poetry run coverage json

          export TOTAL=$(python ci/get_coverage.py)
          echo "total_coverage=$TOTAL" >> $GITHUB_OUTPUT

          echo "### Total coverage: ${TOTAL}%" >> $GITHUB_STEP_SUMMARY
          poetry run coverage report --format=markdown >> $GITHUB_STEP_SUMMARY

      - name: Make Coverage Badge
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: 6a95d35f234e3d7144a8b254a89a277b
          filename: coverage_badge.json
          label: Coverage
          message: ${{ steps.coverage_results.outputs.total_coverage }}%
          minColorRange: 50
          maxColorRange: 90
          valColorRange: ${{ steps.coverage_results.outputs.total_coverage }}
